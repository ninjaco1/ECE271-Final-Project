module PS2Keyboard(
	input logic PS2data,
	input logic PS2clock,
	input logic clock,
	output logic code,
	output logic ready
	);
endmodule
	
module synchronizer(
	input logic clk,
	input logic d,
	output logic q
	);
	
	logic replace;
	
	always_ff @ (posedge clk)
		begin
			replace <= d;
			q <= replace;
		end
endmodule

module debounce(
	input logic d,
	input logic clk,
	output logic q
	);
	
	logic ff1;
	logic ff2;
	logic enablecounter;
	logic [8:0]count;       //8 bit count, not sure number
	logic cout;
	logic enableff3;
	
	assign enablecounter = 1;
	assign cout = 0;
	
	always_ff @ (posedge clk)
		begin
			ff1 <= d;
			ff2 <= ff1;
			
			if(enablecounter)
				begin
					if(ff1 ^ ff2) count <= 8'b0;
					else if(count == 8'b100) cout <= 1;     //not sure when to equal, check formula
					else count <= count + 1;
				end
				
			enablecounter <= !cout;
			enableff3 <= cout;
			
			if(enableff3) q <= ff2;
		end
		
endmodule

module shiftregister(
	input logic clk,
	input logic d,
	output logic q
	);
	
	logic replace;
	
	always_ff @ (negedge clk)
		begin
			replace <= d;
			q <= replace;
		end
		
endmodule

module shiftregistertotal(
	input logic [10:0] d,
	input logic clk,
	input logic enable,
	output logic [7:0] q
	);
	
	logic [7:0] replace;
	
	always_ff @ (posedge clk)
		begin
			if(enable)
				begin
					replace <= d[8:1];
					q <= replace;
				end
		end
		
endmodule

module idlecounter(
	input logic clear,
	input logic clk,
	input logic enable,
	output logic cout
	);
	
	logic [8:0] count;                        //need to find bit count
	
	always_ff @ (posedge clk)
		begin
			if(enable)
				if(!clear) count <= 8'b0;
				else if(count == 8'b100) cout <= 1;     //need to find value, 55us
				else count <= count + 1;
		end
			
endmodule

module errorchecklogic(
	input logic [9:1] d,
	output logic q
	);
	
	logic q1, q2, q3, q4, q5, q6, q7, q8;
	
	always @ (*)
		begin
			q1 <= d[1] ^ d[2];
			q2 <= q1 ^ d[3];
			q3 <= q2 ^ d[4];
			q4 <= q3 ^ d[5];
			q5 <= q4 ^ d[6];
			q6 <= q5 ^ d[7];
			q7 <= q6 ^ d[8];
			q8 <= q7 ^ d[9];
			q <= q8;
		end

endmodule

module finalcheck(
	input logic d,
	input logic p,
	output logic q
	);
	
	always @ (*)
		q <= d & p;
		
endmodule

module shiftregistersignal(
	input logic d,
	input logic clock,
	output logic q
	);
	
	always_ff @ (clock)
		q <= d;

endmodule